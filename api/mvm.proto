// protoc --go_out=./internal/pkg/generated  api/mvm.proto
// protoc --csharp_out=../C# mvm.proto
// protoc --python_out=../Python mvm.proto
syntax = "proto3";
package mvm;

option go_package = "./mvmPb";

message Empty {}

message LoginUserRequest{
    string username = 1 ;
    string password = 2;
}

message LoginUserResponse{
    string id = 1;
    string token = 2;
    string refreshToken = 3;
}

message LoginByRefreshTokenRequest {
    string refreshToken = 1;
}

message CreateUserRequest {
    string username = 1 ; 
    string email = 2 ; 
    string phonenumber = 3;
    string password = 4 ;
}

message CreateUserResponse {
    string id = 1 ;
    string token = 2;
    string refreshToken = 3;
}

message GetProfileRequest {}

message GetProfileResponse {
    UserProfile profile = 1;
    repeated Room userRooms = 2;
    AvatarSettings avatarSettings = 3 ; 
}

message GetUserByUsernameRequest {
    string username = 1 ;
}

message GetUserByUsernameResponse {
    UserProfile profile = 1;
    repeated Room userRooms = 2;
}

message CreateFriendRequestRequest {
    string friendId = 1 ; 
}

message CreateFriendRequestResponse {}

message DeleteFriendRequestRequest {
    string friendId = 1 ; 
}

message DeleteFriendRequestResponse {}

message AddFriendRequest {
    string friendId = 1 ; 
}

message AddFriendResponse {}

message DeleteFriendRequest{
    string friendId = 1 ; 
}

message DeleteFriendResponse {}

message GetFriendsRequest {}

message GetFriendsResponse {
    repeated UserProfile profiles = 1;
    repeated string pending = 2;
    repeated string sentRequests = 3;
}

message GetPendingFriendsRequest {}

message GetPendingFriendsResponse {
    repeated UserProfile profiles = 1;
}

message SearchForUsersRequest {
    string searchInput = 1 ;
}

message SearchForUsersResponse {
    repeated UserProfile users = 1 ;
}

message CreateRoomRequest{
    string title  = 1 ; 
    bool isPrivate = 2; 
    bool friends_only = 3;
}

message CreateRoomResponse{
    Room room = 1;
}

message GetRoomRequest {}

message GetRoomsResponse {
    repeated Room rooms = 1 ; 
}

message GetUserRoomsRequest {
    string userId = 1;
}

message GetUserRoomsResponse {
    repeated Room rooms = 1 ; 
}

message DeleteRoomRequest {
    string roomId = 1 ; 
}

message DeleteRoomResponse {
    string roomId = 1 ; 
}

message CreateRoomInvitationRequest {
    string roomId = 1 ;
    string userId = 2 ;
}

message CreateRoomInvitationResponse {}

message DeleteRoomInvitationRequest {
    string roomId = 1 ;
    string userId = 2 ;
}

message DeleteRoomInvitationResponse {}

message UserProfile {
    string id = 1 ; 
    string username = 2;
    string email = 3;
    string phonenumber = 4;
}

message GetIceResponse{
    repeated string ices = 1 ;
}

message Room {
    string id = 1;
    string ownerId = 2 ; 
    string title  = 3 ; 
    repeated string users = 4;
    bool isPrivate = 5; 
    bool friendsOnly = 6 ;
    repeated string invitations = 7 ;
}

message UpsertAvatarSettingsRequest {
    AvatarSettings settings = 1;
}

message UpsertAvatarSettingsResponse{}

message GetAvatarSettingsRequest{}

message GetAvatarSettingsResponse{
    AvatarSettings settings = 1;
}

message GetUserProfileFeaturesRequest {
    string id = 1 ; 
}

message GetUserProfileFeaturesResponse {
    UserProfile profile = 1;
    AvatarSettings avatarSettings = 2 ; 
}

message AvatarSettings{ 
    string headStyle = 1;
    string hairStyle = 2;
    string eyebrowsStyle = 3;
    string eyeStyle = 4;
    string noseStyle = 5;
    string mouthStyle = 6;
    string skinImperfection = 7;
    string tattoo = 8;
    string hairColor = 9;
    string browsColor = 10;
    string skinColor = 11;
    string eyeColor = 12;
    string gender = 13;
    string roomBackgroundColor = 14;
}

message GetNotificationsResponse {
    repeated Notification notifications = 1;
}

message DeleteNotificationRequest {
    string notificationId = 1;
}

message DeleteNotificationResponse {}


message DeleteNotificationsRequest {}

message DeleteNotificationsResponse {}

// Socket messages 

message SocketMessage  {
    SocketMessageType type = 1;
    oneof data {
        RoomMessage room_message = 2 ;
        ErrorMessage error_message = 3;
    }
}

enum SocketMessageType {
    ROOM_MESSAGE = 0;
    USER_JOINED = 1;
    ERROR = 2;
}

message RoomMessage {
    optional string message = 2 ;   
    repeated Keypoint keypoints = 3 ; 
}

message ErrorMessage {
    int64 status_code = 1 ; 
    string error = 2 ;
}

enum DataChannelMessageType {
    TRACKING_MESSAGE = 0 ; 
    CHAT_MESSAGE = 1 ;
    AVATAR_MESSAGE = 3;
}

message ChatMessage {
    string message = 1;
}

message DataChannelMessage {
    DataChannelMessageType type = 1 ; 
    optional TrackingMessage tracking_message = 2 ; 
    optional ChatMessage chat_message = 3 ; 
    optional AvatarSettings avatar_message = 4;
    optional FaceRotationKeypointsMessage face_rotation_message = 5;
}

message TrackingMessage{
    int64 index = 1 ; 
    BlendShapes blendShapes = 2 ; 
    Keypoints keypoints = 3 ; 
    string date = 4 ; 
}

message FaceRotationKeypointsMessage {
    Keypoint point1 = 1 ;
    Keypoint point2 = 2 ;
    Keypoint point3 = 3 ;
    Keypoint point4 = 4 ;
}

message Keypoint {
    float x = 1 ;
    float y = 2 ;
    float z = 3 ;
}

message BlendShape {
    int64 index = 1 ; 
    float score = 2 ; 
    string category_name = 3 ;
}
  
message BlendShapes {
    repeated BlendShape blendShapes = 1 ; 
}

message Keypoints {
    repeated Keypoint keypoints = 1 ; 
}

message OnlineStatuses {
    repeated OnlineStatus users = 1;
}

message OnlineStatus {
    string id = 1 ; 
    string username = 2;
    bool isOnline = 3 ;
}

enum NotificationType{
    DEFAULT = 0 ;
    FRIEND_REQUEST = 1 ;
    ROOM_INVITATION = 2 ;
    ACCEPT_REQUEST = 3 ;
}

message Notification{
    string id = 1;
    string userId = 2;
    int32 type = 3;
    string fromUser = 4 ;
    optional string entityId = 5 ;
    optional string message = 6;
}